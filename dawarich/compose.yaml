name: dawarich
networks:
  dawarich:
services:
  dawarich_redis:
    image: redis:7.4-alpine
    container_name: dawarich_redis
    user: 1000:1000
    command: redis-server
    networks:
      - dawarich
    volumes:
      - /mnt/2000/container-mounts/dawarich/redis_data:/data
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      start_period: 120s
      start_interval: 5s
      interval: 5m
      timeout: 5s
      retries: 3
  dawarich_db:
    image: postgis/postgis:17-3.5-alpine
    shm_size: 1G
    container_name: dawarich_db
    user: 1000:1000
    volumes:
      - /mnt/2000/container-mounts/dawarich/db_data:/var/lib/postgresql/data
    networks:
      - dawarich
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: dawarich_production
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      start_period: 120s
      start_interval: 5s
      interval: 5m
      timeout: 5s
      retries: 3
    # If you want to expose the database for exploring it.
    ports:
      - 5432:5432
  dawarich_app:
    image: freikin/dawarich:latest
    container_name: dawarich_app
    volumes:
      - /mnt/2000/container-mounts/dawarich/public:/var/app/public
      - /mnt/2000/container-mounts/dawarich/watched:/var/app/tmp/imports/watched
      - /mnt/2000/container-mounts/dawarich/storage:/var/app/storage
    networks:
      - dawarich
    stdin_open: true
    tty: true
    entrypoint: web-entrypoint.sh
    command: ["bin/rails", "server", "-p", "3000", "-b", "::"]
    restart: no
    environment:
      RAILS_ENV: production
      REDIS_URL: redis://dawarich_redis:6379
      DATABASE_HOST: dawarich_db
      DATABASE_PORT: 5432
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: dawarich_production
      MIN_MINUTES_SPENT_IN_CITY: 60
      APPLICATION_HOST: ${APPLICATION_HOST}
      APPLICATION_HOSTS: ${APPLICATION_HOST},localhost,::1,127.0.0.1
      TIME_ZONE: America/Chicago
      APPLICATION_PROTOCOL: http
      PROMETHEUS_EXPORTER_ENABLED: false
      PROMETHEUS_EXPORTER_HOST: 0.0.0.0
      PROMETHEUS_EXPORTER_PORT: 9394
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      RAILS_LOG_TO_STDOUT: "true"
      ENABLE_TELEMETRY: false # More on telemetry: https://dawarich.app/docs/tutorials/telemetry
      PHOTON_API_HOST: ${PHOTON_API_HOST}
      PHOTON_API_USE_HTTPS: ${PHOTON_API_USE_HTTPS}
      REVERSE_GEOCODING_ENABLED: true
      SELF_HOSTED: true
      STORE_GEODATA: false
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -qO - http://127.0.0.1:3000/api/v1/health | grep -q '\"status\"\\s*:\\s*\"ok\"'",
        ]
      start_period: 120s
      start_interval: 5s
      interval: 5m
      timeout: 5s
      retries: 3
    depends_on:
      dawarich_db:
        condition: service_healthy
        restart: true
      dawarich_redis:
        condition: service_healthy
        restart: true
    labels:
      # For homepage
      - homepage.group=Favorites
      - homepage.name=Dawarich
      - homepage.weight=10
      - homepage.icon=/dashboard-icons/svg/dawarich.svg
      - homepage.href=${HOME_PAGE_URL}
  dawarich_sidekiq:
    image: freikin/dawarich:latest
    container_name: dawarich_sidekiq
    volumes:
      - /mnt/2000/container-mounts/dawarich/public:/var/app/public
      - /mnt/2000/container-mounts/dawarich/watched:/var/app/tmp/imports/watched
      - /mnt/2000/container-mounts/dawarich/storage:/var/app/storage
    networks:
      - dawarich
    stdin_open: true
    tty: true
    entrypoint: sidekiq-entrypoint.sh
    command: ["bundle", "exec", "sidekiq"]
    restart: on-failure
    environment:
      RAILS_ENV: production
      REDIS_URL: redis://dawarich_redis:6379
      DATABASE_HOST: dawarich_db
      DATABASE_PORT: 5432
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: dawarich_production
      APPLICATION_HOST: ${APPLICATION_HOST}
      APPLICATION_HOSTS: ${APPLICATION_HOST},localhost,::1,127.0.0.1
      BACKGROUND_PROCESSING_CONCURRENCY: 10
      APPLICATION_PROTOCOL: http
      PROMETHEUS_EXPORTER_ENABLED: false
      PROMETHEUS_EXPORTER_HOST: dawarich_app
      PROMETHEUS_EXPORTER_PORT: 9394
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      RAILS_LOG_TO_STDOUT: "true"
      ENABLE_TELEMETRY: false # More on telemetry: https://dawarich.app/docs/tutorials/telemetry
      PHOTON_API_HOST: ${PHOTON_API_HOST}
      PHOTON_API_USE_HTTPS: ${PHOTON_API_USE_HTTPS}
      REVERSE_GEOCODING_ENABLED: true
      TIME_ZONE: America/Chicago
      SELF_HOSTED: true
      STORE_GEODATA: false
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    healthcheck:
      test: ["CMD-SHELL", "bundle exec sidekiqmon processes | grep Processes"]
      start_period: 120s
      start_interval: 5s
      interval: 5m
      timeout: 5s
      retries: 3
    depends_on:
      dawarich_db:
        condition: service_healthy
        restart: true
      dawarich_redis:
        condition: service_healthy
        restart: true
      dawarich_app:
        condition: service_healthy
        restart: true
      dawarich_photon:
        condition: service_healthy
        restart: true
    deploy:
      resources:
        limits:
          cpus: "0.50" # Limit CPU usage to 50% of one core
          memory: "4G" # Limit memory usage to 4GB
  ts:
    container_name: dawarich-ts
    image: tailscale/tailscale
    env_file: tailscale.env
    environment:
      - TS_HOSTNAME=dawarich
      - TS_EXTRA_ARGS=--advertise-tags=tag:container
      - TS_SERVE_CONFIG=/config/tailscale-config.json
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_ENABLE_HEALTH_CHECK=true
      - TS_LOCAL_ADDR_PORT=127.0.0.1:9002
    volumes:
      - ./tailscale-state:/var/lib/tailscale
      - ./tailscale-config:/config
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - net_admin
      - sys_module
    # https://github.com/tailscale/tailscale/issues/12758#issuecomment-2564770640
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://127.0.0.1:9002/healthz"]
      start_period: 120s
      start_interval: 5s
      interval: 5m
      timeout: 5s
      retries: 3
    networks:
      - dawarich
    restart: always
    depends_on:
      dawarich_app:
        condition: service_healthy
  # I run photon here for simplicity and to avoid the overhead of passing data out and back in through a tailscale tunnel.
  dawarich_photon:
    container_name: dawarich_photon
    build:
      context: ./photon
      dockerfile: Dockerfile
      args:
        # Watch https://github.com/komoot/photon for the latest version
        PHOTON_VERSION: 0.6.2
    volumes:
      - /mnt/250/container-mounts/photon/photon_data:/photon/photon_data
    networks:
      - dawarich
    restart: no
    healthcheck:
      test: 'curl --fail http://localhost:2322/status 2>/dev/null | grep -o "\"status\":\"Ok\"," || exit 1'
      start_period: 120s
      start_interval: 5s
      interval: 5m
      timeout: 5s
      retries: 3
