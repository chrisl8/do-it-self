name: dawarich
networks:
  dawarich:
services:
  dawarich_redis:
    image: redis:alpine
    container_name: dawarich_redis
    command: redis-server
    networks:
      - dawarich
    volumes:
      - /mnt/2000/container-mounts/dawarich/redis_shared_data:/var/shared/redis
    restart: no
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      start_period: 120s
      start_interval: 5s
      interval: 5m
      timeout: 5s
      retries: 3
  dawarich_db:
    image: postgres:17-alpine
    shm_size: 1G
    container_name: dawarich_db
    volumes:
      - /mnt/2000/container-mounts/dawarich/db_data:/var/lib/postgresql/data
      - ./dawarich/postgresql.conf.example:/etc/postgresql/postgresql.conf
    networks:
      - dawarich
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: dawarich_production
    restart: no
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      start_period: 120s
      start_interval: 5s
      interval: 5m
      timeout: 5s
      retries: 3
    command: postgres -c config_file=/etc/postgresql/postgresql.conf # Use custom config
    # If you want to expose the database for exploring it.
    ports:
      - 5432:5432
  dawarich_app:
    container_name: dawarich_app
    build:
      context: ./dawarich
      dockerfile: docker/Dockerfile.prod
    volumes:
      - /mnt/2000/container-mounts/dawarich/public:/var/app/public
      - /mnt/2000/container-mounts/dawarich/watched:/var/app/tmp/imports/watched
    networks:
      - dawarich
    stdin_open: true
    tty: true
    entrypoint: web-entrypoint.sh
    command: [ 'bin/rails', 'server', '-p', '3000', '-b', '::' ]
    restart: no
    environment:
      RAILS_ENV: production
      REDIS_URL: redis://dawarich_redis:6379/0
      DATABASE_HOST: dawarich_db
      DATABASE_PORT: 5432
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: dawarich_production
      MIN_MINUTES_SPENT_IN_CITY: 60
      APPLICATION_HOST: ${APPLICATION_HOST}
      APPLICATION_HOSTS: ${APPLICATION_HOST},localhost,::1,127.0.0.1
      TIME_ZONE: America/Chicago
      APPLICATION_PROTOCOL: http
      DISTANCE_UNIT: mi
      PROMETHEUS_EXPORTER_ENABLED: false
      PROMETHEUS_EXPORTER_HOST: 0.0.0.0
      PROMETHEUS_EXPORTER_PORT: 9394
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      RAILS_LOG_TO_STDOUT: "true"
      ENABLE_TELEMETRY: false # More on telemetry: https://dawarich.app/docs/tutorials/telemetry
      PHOTON_API_HOST: ${PHOTON_API_HOST}
      PHOTON_API_USE_HTTPS: ${PHOTON_API_USE_HTTPS}
      REVERSE_GEOCODING_ENABLED: true
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "2"
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO - http://127.0.0.1:3000/api/v1/health | grep -q '\"status\"\\s*:\\s*\"ok\"'" ]
      start_period: 120s
      start_interval: 5s
      interval: 5m
      timeout: 5s
      retries: 3
    depends_on:
      dawarich_db:
        condition: service_healthy
        restart: true
      dawarich_redis:
        condition: service_healthy
        restart: true
    labels:
      # For homepage
      - homepage.group=MiddleServices
      - homepage.name=Dawarich
      - homepage.weight=50
      - homepage.icon=/icons/dawarich.png
      - homepage.href=${HOME_PAGE_URL}
  dawarich_sidekiq:
    container_name: dawarich_sidekiq
    build:
      context: ./dawarich
      dockerfile: docker/Dockerfile.prod
    volumes:
      - /mnt/2000/container-mounts/dawarich/public:/var/app/public
      - /mnt/2000/container-mounts/dawarich/watched:/var/app/tmp/imports/watched
    networks:
      - dawarich
    stdin_open: true
    tty: true
    entrypoint: sidekiq-entrypoint.sh
    command: [ 'bundle', 'exec', 'sidekiq' ]
    restart: no
    environment:
      RAILS_ENV: production
      REDIS_URL: redis://dawarich_redis:6379/0
      DATABASE_HOST: dawarich_db
      DATABASE_PORT: 5432
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: dawarich_production
      APPLICATION_HOST: ${APPLICATION_HOST}
      APPLICATION_HOSTS: ${APPLICATION_HOST},localhost,::1,127.0.0.1
      BACKGROUND_PROCESSING_CONCURRENCY: 10
      APPLICATION_PROTOCOL: http
      DISTANCE_UNIT: mi
      PROMETHEUS_EXPORTER_ENABLED: false
      PROMETHEUS_EXPORTER_HOST: dawarich_app
      PROMETHEUS_EXPORTER_PORT: 9394
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      RAILS_LOG_TO_STDOUT: "true"
      ENABLE_TELEMETRY: false # More on telemetry: https://dawarich.app/docs/tutorials/telemetry
      PHOTON_API_HOST: ${PHOTON_API_HOST}
      PHOTON_API_USE_HTTPS: ${PHOTON_API_USE_HTTPS}
      REVERSE_GEOCODING_ENABLED: true
      TIME_ZONE: America/Chicago
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "2"
    healthcheck:
      test: [ "CMD-SHELL", "bundle exec sidekiqmon processes | grep $${HOSTNAME}" ]
      start_period: 120s
      start_interval: 5s
      interval: 5m
      timeout: 5s
      retries: 3
    depends_on:
      dawarich_db:
        condition: service_healthy
        restart: true
      dawarich_redis:
        condition: service_healthy
        restart: true
      dawarich_app:
        condition: service_healthy
        restart: true
      dawarich_photon:
        condition: service_healthy
        restart: true
    deploy:
      resources:
        limits:
          cpus: '0.50' # Limit CPU usage to 50% of one core
          memory: '4G' # Limit memory usage to 4GB
  ts:
    container_name: dawarich-ts
    image: tailscale/tailscale
    env_file: tailscale.env
    environment:
      - TS_HOSTNAME=dawarich
      - TS_EXTRA_ARGS=--advertise-tags=tag:container
      - TS_SERVE_CONFIG=/config/tailscale-config.json
      - TS_STATE_DIR=/var/lib/tailscale
    volumes:
      - ./tailscale-state:/var/lib/tailscale
      - ./tailscale-config:/config
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - net_admin
      - sys_module
    # https://github.com/tailscale/tailscale/issues/12758#issuecomment-2265152534
    healthcheck:
      test: tailscale status --peers=false --json | grep -q 'Online.*true'
      start_period: 120s
      start_interval: 5s
      interval: 5m
      timeout: 5s
      retries: 3
    networks:
      - dawarich
    restart: no
    depends_on:
      dawarich_sidekiq:
        condition: service_healthy
  # I run photon here for simplicity and to avoid the overhead of passing data out and back in through a tailscale tunnel.
  dawarich_photon:
    container_name: dawarich_photon
    build:
      context: ./photon
      dockerfile: Dockerfile
      args:
        # Watch https://github.com/komoot/photon for the latest version
        PHOTON_VERSION: 0.6.2
    volumes:
      - /mnt/250/container-mounts/photon/photon_data:/photon/photon_data
    networks:
      - dawarich
    restart: no
    healthcheck:
      test: 'curl --fail http://localhost:2322/status 2>/dev/null | grep -o "\"status\":\"Ok\"," || exit 1'
      start_period: 120s
      start_interval: 5s
      interval: 5m
      timeout: 5s
      retries: 3
